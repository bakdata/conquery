openapi: 3.0.1
info:
  title: Conquery API
  description: Api to use Conquery.
  version: 2.0.0
tags:
  - name: api
paths:
  /datasets/{dataset}/concepts/{concept}:
    delete:
      tags:
        - admin
      operationId: removeConcept
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: concept
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/concepts:
    get:
      tags:
        - admin
      operationId: listConcepts
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/x-jackson-smile:
              schema:
                type: array
                items:
                  type: string
    post:
      tags:
        - admin
      operationId: addConcept
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptObject'
          application/x-jackson-smile:
            schema:
              $ref: '#/components/schemas/ConceptObject'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/imports:
    post:
      tags:
        - admin
      operationId: addImport
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: file
          in: query
          schema:
            type: string
            format: binary
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/secondaryId:
    post:
      tags:
        - admin
      operationId: addSecondaryId
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecondaryIdDescription'
          application/x-jackson-smile:
            schema:
              $ref: '#/components/schemas/SecondaryIdDescription'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/tables:
    get:
      tags:
        - admin
      operationId: listTables
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
            application/x-jackson-smile:
              schema:
                type: array
                items:
                  type: string
    post:
      tags:
        - admin
      operationId: addTable
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
          application/x-jackson-smile:
            schema:
              $ref: '#/components/schemas/Table'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}:
    delete:
      tags:
        - admin
      operationId: delete
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/secondaryId/{secondaryId}:
    delete:
      tags:
        - admin
      operationId: deleteSecondaryId
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: secondaryId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SecondaryIdDescription'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/mapping:
    post:
      tags:
        - admin
      operationId: setIdMapping
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          '*/*':
            schema:
              type: object
              properties:
                data_csv:
                  type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/structure:
    post:
      tags:
        - admin
      operationId: setStructure
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StructureNode'
          application/x-jackson-smile:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StructureNode'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/label:
    post:
      tags:
        - admin
      operationId: setlabel
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/x-jackson-smile:
            schema:
              type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets:
    get:
      tags:
        - admin
      operationId: listDatasets
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
            application/x-jackson-smile:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Id'
    post:
      tags:
        - admin
      operationId: addDataset
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - dataset_name
              type: object
              properties:
                dataset_name:
                  type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/tables/{table}/imports/{importId}:
    delete:
      tags:
        - admin
      operationId: deleteImport
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: table
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: importId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Import'
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /datasets/{dataset}/tables/{table}/imports:
    get:
      tags:
        - admin
      operationId: listImports
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: table
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
      responses:
        default:
          description: default response
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  type: string
  /datasets/{dataset}/tables/{table}:
    delete:
      tags:
        - admin
      operationId: remove
      parameters:
        - name: dataset
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: table
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Id'
        - name: force
          in: query
          schema:
            type: boolean
            default: false
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/x-jackson-smile: {}
  /roles/{roleId}:
    delete:
      tags:
        - admin
      operationId: deleteRole
      parameters:
        - name: roleId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Role'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /roles:
    get:
      tags:
        - admin
      operationId: getRoles
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
        - admin
      operationId: postRoles
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Role'
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /local-authentiaction:
    put:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtoUser'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
    post:
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProtoUser'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
  /local-authentiaction/{userId}:
    delete:
      operationId: removeUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User'
      responses:
        default:
          description: default response
          content:
            '*/*': {}
components:
  schemas:
    Id:
      pattern: '[a-z0-9](\.[a-z0-9]+)*'
      type: string
      format: string
    ConceptObject:
      required:
        - label
        - type
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        description:
          type: string
        additionalInfos:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
        hidden:
          type: boolean
        connectors:
          type: array
          items:
            type: object
        dataset:
          $ref: '#/components/schemas/Id'
        defaultSelects:
          type: array
          items:
            $ref: '#/components/schemas/Select'
        selects:
          type: array
          items:
            $ref: '#/components/schemas/Select'
        type:
          type: string
      discriminator:
        propertyName: type
    KeyValue:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Select:
      required:
        - label
        - type
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        holder:
          $ref: '#/components/schemas/SelectHolderObject'
        description:
          type: string
        default:
          type: boolean
        type:
          type: string
      discriminator:
        propertyName: type
    SelectHolderObject:
      type: object
      properties:
        selects:
          type: array
          items:
            type: object
    SecondaryIdDescription:
      required:
        - label
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        dataset:
          $ref: '#/components/schemas/Id'
        description:
          type: string
    Column:
      required:
        - label
        - table
        - type
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        table:
          $ref: '#/components/schemas/Table'
        type:
          type: string
          enum:
            - STRING
            - INTEGER
            - BOOLEAN
            - REAL
            - DECIMAL
            - MONEY
            - DATE
            - DATE_RANGE
        position:
          type: integer
          format: int32
        sharedDictionary:
          type: string
        secondaryId:
          $ref: '#/components/schemas/Id'
    Table:
      required:
        - columns
        - label
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        dataset:
          $ref: '#/components/schemas/Id'
        columns:
          type: array
          items:
            $ref: '#/components/schemas/Column'
    StructureNode:
      required:
        - dataset
        - label
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        dataset:
          $ref: '#/components/schemas/Id'
        description:
          type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/StructureNode'
        parent:
          $ref: '#/components/schemas/StructureNode'
        containedRoots:
          uniqueItems: true
          type: array
          items:
            type: string
        additionalInfos:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    ColumnStore:
      required:
        - type
      type: object
      properties:
        null:
          type: integer
          format: int32
          writeOnly: true
        type:
          type: string
      discriminator:
        propertyName: type
    Import:
      required:
        - columns
        - dictionaries
        - table
      type: object
      properties:
        name:
          type: string
        table:
          $ref: '#/components/schemas/Id'
        numberOfEntities:
          type: integer
          format: int64
        numberOfEntries:
          type: integer
          format: int64
        columns:
          type: array
          items:
            $ref: '#/components/schemas/ImportColumn'
        dictionaries:
          uniqueItems: true
          type: array
          items:
            type: string
    ImportColumn:
      required:
        - parent
      type: object
      properties:
        name:
          type: string
        parent:
          $ref: '#/components/schemas/Import'
        typeDescription:
          $ref: '#/components/schemas/ColumnStore'
        lines:
          type: integer
          format: int64
        memorySizeBytes:
          minimum: 0
          type: integer
          format: int64
    ConqueryPermission:
      required:
        - type
      type: object
      properties:
        creationTime:
          type: string
          format: date-time
        domains:
          uniqueItems: true
          type: array
          items:
            type: string
        instances:
          uniqueItems: true
          type: array
          items:
            type: string
        abilities:
          uniqueItems: true
          type: array
          items:
            type: string
        type:
          type: string
      discriminator:
        propertyName: type
    Role:
      required:
        - label
        - name
        - permissions
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ConqueryPermission'
    CredentialType:
      required:
        - type
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
    ProtoUser:
      required:
        - credentials
        - name
        - permissions
      type: object
      properties:
        label:
          type: string
        name:
          type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            type: string
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/CredentialType'
    User:
      required:
        - label
        - name
        - permissions
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ConqueryPermission'
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
